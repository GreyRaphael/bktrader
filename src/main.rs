use bktrader::datatype::quote::Bar;
use bktrader::strategy::base::QuoteHandler;
use bktrader::strategy::qdii::GridCCI;
use duckdb::{params, Connection};
use rayon::prelude::*;
use std::marker::PhantomData;
use std::time::Instant;

// Trait to map database rows to structs
trait FromRow {
    fn from_row(row: &duckdb::Row) -> Result<Self, duckdb::Error>
    where
        Self: Sized;
}

// Implement FromRow for Bar
impl FromRow for Bar {
    fn from_row(row: &duckdb::Row) -> Result<Self, duckdb::Error> {
        Ok(Bar {
            code: row.get(0)?,
            dt: row.get(1)?,
            preclose: row.get(2)?,
            open: row.get(3)?,
            high: row.get(4)?,
            low: row.get(5)?,
            close: row.get(6)?,
            netvalue: row.get(7)?,
            volume: row.get(8)?,
            amount: row.get(9)?,
            trades_count: row.get(10)?,
            turnover: row.get(11)?,
        })
    }
}

// Generic Engine struct
struct Engine<T> {
    uri: String,
    sql: String,
    code: u32,
    start: String,
    end: String,
    _marker: PhantomData<T>,
}

impl<T: FromRow + std::fmt::Debug> Engine<T> {
    fn new(uri: &str, sql: &str, code: u32, start: &str, end: &str) -> Self {
        Self {
            uri: uri.into(),
            sql: sql.into(),
            code,
            start: start.into(),
            end: end.into(),
            _marker: PhantomData,
        }
    }

    fn run<S: QuoteHandler<T>>(&mut self, stg: &mut S) -> Result<(), duckdb::Error> {
        let conn = Connection::open(&self.uri)?;
        let mut stmt = conn.prepare(&self.sql)?;
        let rows = stmt.query_map(params![self.code, self.start, self.end], |row| T::from_row(row))?;

        for row in rows {
            let data = row?;
            stg.on_quote(&data);
        }

        Ok(())
    }
}

fn main() -> Result<(), duckdb::Error> {
    // Define the database URI
    let uri = "etf.db";
    // Define the date range
    let start = "2022-11-20";
    let end = "2024-12-31";

    // List of codes to process
    let code_list: Vec<u32> = vec![
        515000, 515130, 515160, 515300, 515530, 515680, 515750, 515760, 515780, 515880, 515950, 515990, 516190, 516200, 516210, 516330, 159811, 159819, 159821, 159848, 159852, 159867, 159883, 159887,
        159915, 510050, 510290, 510380, 159330, 159516, 159537, 159540, 159549, 159563, 159572, 159597, 159613, 159635, 159658, 159666, 159679, 159680, 159682, 159729, 159731, 159743, 159745, 159760,
        159770, 159787, 159925, 159938, 159940, 159970, 510880, 512520, 512530, 512710, 512900, 512930, 516730, 516860, 516920, 517000, 517180, 517200, 517360, 517800, 517850, 530880, 560020, 560000,
        560280, 560520, 560550, 560620, 560690, 560880, 560800, 560980, 561300, 561990, 562000, 562010, 562300, 562600, 563010, 588000, 588050, 512150, 512220, 512290, 512400, 588070, 588120, 588320,
        588330, 588400, 515100, 515180, 515200, 515550, 515890, 516010, 516080, 516090, 516150, 516270, 516290, 516350, 516380, 516390, 516600, 516610, 516650, 516660, 159807, 159808, 159836, 159845,
        159857, 159872, 159880, 159881, 159895, 159902, 159905, 159998, 510100, 510200, 510270, 510580, 159327, 159527, 159532, 159530, 159543, 159553, 159571, 159565, 159591, 159581, 159601, 159618,
        159621, 159628, 159631, 159642, 159645, 159653, 159667, 159685, 159689, 159713, 159719, 159723, 159730, 159738, 159773, 159780, 159786, 159919, 159922, 159939, 159944, 159956, 159968, 159976,
        510660, 510770, 512510, 512650, 512720, 512800, 516710, 516750, 516760, 517010, 517080, 517050, 517100, 517390, 560080, 560890, 561060, 561160, 562520, 562700, 562930, 563180, 563200, 563220,
        563350, 512010, 512100, 512120, 512380, 588080, 588310, 588880, 588900, 588700, 588830, 588890, 515070, 515210, 515380, 515660, 515790, 515910, 516000, 516130, 516300, 516320, 516550, 516670,
        159796, 159800, 159801, 159813, 159820, 159828, 159842, 159864, 159870, 159912, 159918, 510010, 510210, 510310, 510360, 510500, 510510, 510590, 159300, 159305, 159337, 159350, 159332, 159322,
        159326, 159511, 159520, 159533, 159541, 159556, 159575, 159576, 159579, 159586, 159582, 159609, 159616, 159633, 159661, 159673, 159678, 159681, 159683, 159697, 159708, 159728, 159736, 159777,
        159782, 159791, 159793, 159928, 159929, 159931, 159959, 159974, 159993, 510800, 510990, 512480, 512580, 512600, 516800, 516820, 516880, 516890, 517120, 517350, 560030, 560050, 560070, 560100,
        560170, 560510, 560680, 560900, 561120, 561200, 561360, 561510, 561780, 561760, 561920, 562330, 562820, 562800, 562850, 563020, 563050, 563080, 563280, 563360, 563800, 512000, 588200, 588380,
        588460, 588680, 588990, 515050, 515250, 515450, 515590, 515600, 515630, 515850, 515980, 516060, 516590, 516640, 159837, 159841, 159847, 159858, 159871, 159877, 159899, 159903, 159909, 159916,
        510020, 510030, 510090, 510370, 159338, 159351, 159352, 159361, 159328, 159335, 159523, 159526, 159535, 159542, 159589, 159583, 159599, 159608, 159623, 159638, 159663, 159716, 159721, 159755,
        159758, 159767, 159949, 159958, 159965, 510760, 512660, 512700, 512820, 516700, 516790, 516810, 517160, 517770, 560220, 560300, 560530, 560360, 560580, 560610, 560560, 560860, 561310, 561350,
        561570, 561700, 561600, 561790, 561800, 562060, 562350, 562360, 562500, 562510, 562560, 562570, 562590, 562880, 563300, 588010, 512390, 588090, 588100, 588220, 588260, 588350, 588500, 515020,
        515090, 515110, 515150, 515220, 515350, 515360, 515390, 515580, 515700, 515800, 515860, 515900, 516020, 516050, 516070, 516100, 516180, 516520, 159795, 159810, 159838, 159851, 159873, 159891,
        159907, 159910, 159913, 510060, 510170, 510190, 510230, 510390, 159306, 159353, 159310, 159325, 159507, 159515, 159512, 159521, 159525, 159538, 159539, 159552, 159562, 159573, 159587, 159590,
        159625, 159639, 159652, 159656, 159672, 159677, 159692, 159695, 159707, 159703, 159715, 159725, 159732, 159923, 159957, 159971, 159991, 159995, 510630, 510710, 510720, 510850, 512640, 512810,
        512870, 512950, 512970, 516780, 516930, 517030, 517110, 517550, 517880, 517990, 517900, 560330, 560350, 561130, 561190, 561230, 561550, 561560, 561590, 561580, 562340, 562890, 562900, 562960,
        562970, 563030, 563090, 563880, 512040, 512160, 512170, 512260, 588110, 588190, 588210, 588290, 588390, 515060, 515310, 515400, 515710, 515960, 516160, 516500, 516560, 516620, 159797, 159798,
        159804, 159824, 159835, 159839, 159840, 159855, 159865, 159889, 159890, 159896, 510150, 510180, 510410, 510560, 159150, 159508, 159510, 159536, 159547, 159551, 159560, 159578, 159592, 159603,
        159611, 159637, 159640, 159641, 159676, 159717, 159763, 159766, 159768, 159783, 159790, 159930, 159933, 159961, 159969, 159977, 159992, 159994, 159996, 510810, 510950, 512570, 512560, 512680,
        512770, 512960, 516910, 517300, 560090, 560110, 560500, 560650, 560660, 560780, 560850, 560950, 560960, 561100, 561280, 561260, 561370, 561500, 561960, 562390, 562910, 563000, 562990, 563150,
        563330, 563520, 588020, 512280, 515010, 515080, 515120, 515190, 515260, 515290, 515560, 516120, 516220, 516310, 516360, 516570, 516580, 159806, 159827, 159849, 159856, 159859, 159861, 159862,
        159869, 159875, 159886, 159888, 159906, 159997, 510160, 510300, 510330, 510530, 510570, 159301, 159307, 159339, 159309, 159505, 159517, 159531, 159546, 159558, 159559, 159588, 159602, 159617,
        159619, 159620, 159622, 159627, 159629, 159630, 159647, 159662, 159669, 159675, 159686, 159698, 159706, 159752, 159775, 159778, 159781, 159948, 159967, 159973, 159975, 159982, 510650, 510680,
        512690, 512730, 512750, 512880, 516770, 516900, 516950, 516980, 517170, 517330, 560060, 560700, 561010, 561170, 561900, 561930, 561950, 562310, 562260, 562580, 562950, 512090, 512180, 512200,
        512330, 512360, 588150, 588180, 588160, 588280, 588300, 588360, 588800, 588860, 515030, 515170, 515230, 515330, 515320, 515650, 515770, 515810, 515920, 516110, 516260, 516480, 516510, 516530,
        516630, 159805, 159814, 159825, 159843, 159863, 159876, 159885, 159898, 159901, 159908, 510130, 510350, 510550, 510600, 159315, 159321, 159528, 159555, 159566, 159593, 159595, 159596, 159606,
        159610, 159643, 159657, 159665, 159670, 159671, 159690, 159701, 159709, 159720, 159739, 159748, 159757, 159761, 159779, 159935, 159936, 159943, 159945, 159952, 159964, 159966, 510980, 512500,
        512550, 512670, 512760, 512890, 512910, 512990, 512980, 516720, 516830, 516850, 516960, 516970, 517090, 517380, 517400, 517520, 517660, 530000, 560010, 560150, 560180, 560260, 560590, 561000,
        560990, 561180, 561320, 561330, 561910, 561980, 562030, 562320, 562380, 562530, 562550, 562660, 562860, 562920, 588030, 512050, 512070, 512190, 588060, 588370, 588450,
    ];
    // use rayon to parallelize the processing
    // as code number is greater than strategy number, so parallelize the code list
    let bar_sql = r#"
        SELECT
            code,
            date_diff('day', DATE '1970-01-01', dt) AS days_since_epoch,
            ROUND(preclose * adjfactor / 1e4, 3) AS adj_preclose,
            ROUND(open * adjfactor / 1e4, 3) AS adj_open,
            ROUND(high * adjfactor / 1e4, 3) AS adj_high,
            ROUND(low * adjfactor / 1e4, 3) AS adj_low,
            ROUND(close * adjfactor / 1e4, 3) AS adj_close,
            ROUND(netvalue * adjfactor / 1e4, 3) AS adj_netvalue,
            volume,
            ROUND(amount * adjfactor / 1e4, 3) AS adj_amount,
            -- handle null trades_count
            COALESCE(trades_count, 0) AS trades_count,
            turnover,
        FROM
            bar1d
        WHERE
            preclose IS NOT NULL
            AND netvalue IS NOT NULL
            AND code = ?
            AND dt BETWEEN CAST(? AS DATE) AND CAST(? AS DATE)
    "#;

    let start_time = Instant::now();
    code_list.par_iter().for_each(|&code| {
        let mut stga = GridCCI::new(1e5, 15, 20, 0.0, 0.3, "sma", 0.3, 25, 0.15, -0.1);
        let mut engine = Engine::<Bar>::new(uri, bar_sql, code, start, end);
        if let Err(e) = engine.run(&mut stga) {
            eprintln!("Error processing Bar code {}: {:?}", code, e);
        }
        // println!("active length of {} is {}", code, stga.broker.active_position_len());
        // println!("profit of {} is {}", code, stga.broker.profit_float());
        // println!("profit_net of {} is {}", code, stga.broker.profit_net());
    });
    let duration = start_time.elapsed();
    println!("Elapsed time: {:?}", duration);

    Ok(())
}
